<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Flurl.Http</name>
    </assembly>
    <members>
        <member name="M:Flurl.Http.DownloadExtensions.DownloadFileAsync(Flurl.Http.FlurlClient,System.String,System.String,System.Int32)">
            <summary>
            Asynchronously downloads a file at the specified URL.
            </summary>
            <param name="localFolderPath">Path of local folder where file is to be downloaded.</param>
            <param name="localFileName">Name of local file. If not specified, the source filename (last segment of the URL) is used.</param>
            <param name="bufferSize">Buffer size in bytes. Default is 4096.</param>
            <returns>A Task whose result is the local path of the downloaded file.</returns>
        </member>
        <member name="M:Flurl.Http.DownloadExtensions.DownloadFileAsync(System.String,System.String,System.String,System.Int32)">
            <summary>
            Asynchronously downloads a file at the specified URL.
            </summary>
            <param name="localFolderPath">Path of local folder where file is to be downloaded.</param>
            <param name="localFileName">Name of local file. If not specified, the source filename (last segment of the URL) is used.</param>
            <param name="bufferSize">Buffer size in bytes. Default is 4096.</param>
            <returns>A Task whose result is the local path of the downloaded file.</returns>
        </member>
        <member name="M:Flurl.Http.DownloadExtensions.DownloadFileAsync(Flurl.Url,System.String,System.String,System.Int32)">
            <summary>
            Asynchronously downloads a file at the specified URL.
            </summary>
            <param name="localFolderPath">Path of local folder where file is to be downloaded.</param>
            <param name="localFileName">Name of local file. If not specified, the source filename (last segment of the URL) is used.</param>
            <param name="bufferSize">Buffer size in bytes. Default is 4096.</param>
            <returns>A Task whose result is the local path of the downloaded file.</returns>
        </member>
        <member name="M:Flurl.Http.ClientConfigExtensions.ConfigureHttpClient(Flurl.Http.FlurlClient,System.Action{System.Net.Http.HttpClient})">
            <summary>
            Provides access to modifying the underlying HttpClient.
            </summary>
            <param name="action">Action to perform on the HttpClient.</param>
            <returns>The FlurlClient with the modified HttpClient</returns>
        </member>
        <member name="M:Flurl.Http.ClientConfigExtensions.ConfigureHttpClient(System.String,System.Action{System.Net.Http.HttpClient})">
            <summary>
            Creates a FlurlClient from the URL and provides access to modifying the underlying HttpClient.
            </summary>
            <param name="action">Action to perform on the HttpClient.</param>
            <returns>The FlurlClient with the modified HttpClient</returns>
        </member>
        <member name="M:Flurl.Http.ClientConfigExtensions.ConfigureHttpClient(Flurl.Url,System.Action{System.Net.Http.HttpClient})">
            <summary>
            Creates a FlurlClient from the URL and provides access to modifying the underlying HttpClient.
            </summary>
            <param name="action">Action to perform on the HttpClient.</param>
            <returns>The FlurlClient with the modified HttpClient</returns>
        </member>
        <member name="M:Flurl.Http.ClientConfigExtensions.WithTimeout(Flurl.Http.FlurlClient,System.TimeSpan)">
            <summary>
            Sets the client timout to the specified timespan.
            </summary>
            <param name="timespan">Time to wait before the request times out.</param>
            <returns>The modified FlurlClient.</returns>
        </member>
        <member name="M:Flurl.Http.ClientConfigExtensions.WithTimeout(System.String,System.TimeSpan)">
            <summary>
            Creates a FlurlClient from the URL and sets the client timout to the specified timespan.
            </summary>
            <param name="timespan">Time to wait before the request times out.</param>
            <returns>The created FlurlClient.</returns>
        </member>
        <member name="M:Flurl.Http.ClientConfigExtensions.WithTimeout(Flurl.Url,System.TimeSpan)">
            <summary>
            Creates a FlurlClient from the URL and sets the client timout to the specified timespan.
            </summary>
            <param name="timespan">Time to wait before the request times out.</param>
            <returns>The created FlurlClient.</returns>
        </member>
        <member name="M:Flurl.Http.ClientConfigExtensions.WithTimeout(Flurl.Http.FlurlClient,System.Int32)">
            <summary>
            Sets the client timout to the specified number of seconds.
            </summary>
            <param name="seconds">Number of seconds to wait before the request times out.</param>
            <returns>The modified FlurlClient.</returns>
        </member>
        <member name="M:Flurl.Http.ClientConfigExtensions.WithTimeout(System.String,System.Int32)">
            <summary>
            Creates a FlurlClient from the URL and sets the client timout to the specified number of seconds.
            </summary>
            <param name="seconds">Number of seconds to wait before the request times out.</param>
            <returns>The created FlurlClient.</returns>
        </member>
        <member name="M:Flurl.Http.ClientConfigExtensions.WithTimeout(Flurl.Url,System.Int32)">
            <summary>
            Creates a FlurlClient from the URL and sets the client timout to the specified number of seconds.
            </summary>
            <param name="seconds">Number of seconds to wait before the request times out.</param>
            <returns>The created FlurlClient.</returns>
        </member>
        <member name="M:Flurl.Http.ClientConfigExtensions.WithHeader(Flurl.Http.FlurlClient,System.String,System.Object)">
            <summary>
            Sets an HTTP header to be sent with all requests made with this FlurlClient.
            </summary>
            <param name="name">HTTP header name.</param>
            <param name="value">HTTP header value.</param>
            <returns>The modified FlurlClient.</returns>
        </member>
        <member name="M:Flurl.Http.ClientConfigExtensions.WithHeader(System.String,System.String,System.Object)">
            <summary>
            Creates a FlurlClient from the URL and sets an HTTP header to be sent with all requests made with this FlurlClient.
            </summary>
            <param name="name">HTTP header name.</param>
            <param name="value">HTTP header value.</param>
            <returns>The modified FlurlClient.</returns>
        </member>
        <member name="M:Flurl.Http.ClientConfigExtensions.WithHeader(Flurl.Url,System.String,System.Object)">
            <summary>
            Creates a FlurlClient from the URL and sets an HTTP header to be sent with all requests made with this FlurlClient.
            </summary>
            <param name="name">HTTP header name.</param>
            <param name="value">HTTP header value.</param>
            <returns>The modified FlurlClient.</returns>
        </member>
        <member name="M:Flurl.Http.ClientConfigExtensions.WithHeaders(Flurl.Http.FlurlClient,System.Object)">
            <summary>
            Sets HTTP headers based on property names/values of the provided object, or keys/values if object is a dictionary, to be sent with all requests made with this FlurlClient.
            </summary>
            <param name="headers">Names/values of HTTP headers to set. Typically an anonymous object or IDictionary.</param>
            <returns>The modified FlurlClient.</returns>
        </member>
        <member name="M:Flurl.Http.ClientConfigExtensions.WithHeaders(Flurl.Url,System.Object)">
            <summary>
            Creates a FlurlClient from the URL and sets HTTP headers based on property names/values of the provided object, or keys/values if object is a dictionary, to be sent with all requests made with this FlurlClient.
            </summary>
            <param name="headers">Names/values of HTTP headers to set. Typically an anonymous object or IDictionary.</param>
            <returns>The modified FlurlClient.</returns>
        </member>
        <member name="M:Flurl.Http.ClientConfigExtensions.WithHeaders(System.String,System.Object)">
            <summary>
            Creates a FlurlClient from the URL and sets HTTP headers based on property names/values of the provided object, or keys/values if object is a dictionary, to be sent with all requests made with this FlurlClient.
            </summary>
            <param name="headers">Names/values of HTTP headers to set. Typically an anonymous object or IDictionary.</param>
            <returns>The modified FlurlClient.</returns>
        </member>
        <member name="M:Flurl.Http.ClientConfigExtensions.WithBasicAuth(Flurl.Http.FlurlClient,System.String,System.String)">
            <summary>
            Sets HTTP authorization header according to Basic Authentication protocol to be sent with all requests made with this FlurlClient.
            </summary>
            <param name="username">Username of authenticating user.</param>
            <param name="password">Password of authenticating user.</param>
            <returns>The modified FlurlClient.</returns>
        </member>
        <member name="M:Flurl.Http.ClientConfigExtensions.WithBasicAuth(Flurl.Url,System.String,System.String)">
            <summary>
            Creates a FlurlClient from the URL and sets HTTP authorization header according to Basic Authentication protocol to be sent with all requests made with this FlurlClient.
            </summary>
            <param name="username">Username of authenticating user.</param>
            <param name="password">Password of authenticating user.</param>
            <returns>The modified FlurlClient.</returns>
        </member>
        <member name="M:Flurl.Http.ClientConfigExtensions.WithBasicAuth(System.String,System.String,System.String)">
            <summary>
            Creates a FlurlClient from the URL and sets HTTP authorization header according to Basic Authentication protocol to be sent with all requests made with this FlurlClient.
            </summary>
            <param name="username">Username of authenticating user.</param>
            <param name="password">Password of authenticating user.</param>
            <returns>The modified FlurlClient.</returns>
        </member>
        <member name="M:Flurl.Http.ClientConfigExtensions.WithOAuthBearerToken(Flurl.Http.FlurlClient,System.String)">
            <summary>
            Sets HTTP authorization header with acquired bearer token according to OAuth 2.0 specification to be sent with all requests made with this FlurlClient.
            </summary>
            <param name="token">The acquired bearer token to pass.</param>
            <returns>The modified FlurlClient.</returns>
        </member>
        <member name="M:Flurl.Http.ClientConfigExtensions.WithOAuthBearerToken(Flurl.Url,System.String)">
            <summary>
            Creates a FlurlClient from the URL and sets HTTP authorization header with acquired bearer token according to OAuth 2.0 specification to be sent with all requests made with this FlurlClient.
            </summary>
            <param name="token">The acquired bearer token to pass.</param>
            <returns>The modified FlurlClient.</returns>
        </member>
        <member name="M:Flurl.Http.ClientConfigExtensions.WithOAuthBearerToken(System.String,System.String)">
            <summary>
            Creates a FlurlClient from the URL and sets HTTP authorization header with acquired bearer token according to OAuth 2.0 specification to be sent with all requests made with this FlurlClient.
            </summary>
            <param name="token">The acquired bearer token to pass.</param>
            <returns>The modified FlurlClient.</returns>
        </member>
        <member name="T:Flurl.Http.Configuration.DefaultHttpClientFactory">
            <summary>
            Default implementation of IHttpClientFactory used by FlurlHttp. The created HttpClient includes hooks
            that enable FlurlHttp's testing features and respect its configuration settings. Therefore, custom factories
            should inherit from this class (rather than implementing IHttpClientFactory directly) and ensure base.CreateClient
            is called before providing enhancements.
            </summary>
        </member>
        <member name="T:Flurl.Http.Configuration.FlurlHttpConfigurationOptions">
            <summary>
            A set of properties that affect Flurl.Http behavior. Generally set via static FlurlHttp.Configure method.
            </summary>
        </member>
        <member name="M:Flurl.Http.Configuration.FlurlHttpConfigurationOptions.ResetDefaults">
            <summary>
            Clear all custom global options and set default values.
            </summary>
        </member>
        <member name="P:Flurl.Http.Configuration.FlurlHttpConfigurationOptions.DefaultTimeout">
            <summary>
            Gets or sets the default timeout for every HTTP request.
            </summary>
        </member>
        <member name="P:Flurl.Http.Configuration.FlurlHttpConfigurationOptions.HttpClientFactory">
            <summary>
            Gets or sets a factory used to create HttpClient object used in Flurl HTTP calls. Default value
            is an instance of DefaultHttpClientFactory. Custom factory implementations should generally
            inherit from DefaultHttpClientFactory, call base.CreateClient, and manipulate the returned HttpClient,
            otherwise functionality such as callbacks and most testing features will be lost.
            </summary>
        </member>
        <member name="P:Flurl.Http.Configuration.FlurlHttpConfigurationOptions.BeforeCall">
            <summary>
            Gets or sets a callback that is called immediately before every HTTP request is sent.
            </summary>
        </member>
        <member name="P:Flurl.Http.Configuration.FlurlHttpConfigurationOptions.BeforeCallAsync">
            <summary>
            Gets or sets a callback that is asynchronously called immediately before every HTTP request is sent.
            </summary>
        </member>
        <member name="P:Flurl.Http.Configuration.FlurlHttpConfigurationOptions.AfterCall">
            <summary>
            Gets or sets a callback that is called immediately after every HTTP response is received.
            </summary>
        </member>
        <member name="P:Flurl.Http.Configuration.FlurlHttpConfigurationOptions.AfterCallAsync">
            <summary>
            Gets or sets a callback that is asynchronously called immediately after every HTTP response is received.
            </summary>
        </member>
        <member name="P:Flurl.Http.Configuration.FlurlHttpConfigurationOptions.OnError">
            <summary>
            Gets or sets a callback that is called when an error occurs during any HTTP call, including when any non-success
            HTTP status code is returned in the response. Response should be null-checked if used in the event handler.
            </summary>
        </member>
        <member name="P:Flurl.Http.Configuration.FlurlHttpConfigurationOptions.OnErrorAsync">
            <summary>
            Gets or sets a callback that is asynchronously called when an error occurs during any HTTP call, including when any non-success
            HTTP status code is returned in the response. Response should be null-checked if used in the event handler.
            </summary>
        </member>
        <member name="T:Flurl.Http.Configuration.FlurlMessageHandler">
            <summary>
            HTTP message handler used by default in all Flurl-created HttpClients.
            </summary>
        </member>
        <member name="T:Flurl.Http.Content.CapturedFormUrlEncodedContent">
            <summary>
            Provides HTTP content based on object serialized to URL-encoded name-value, with the with the captured to a property
            so it can be read without affecting the read-once content stream.
            </summary>
        </member>
        <member name="T:Flurl.Http.Content.CapturedStringContent">
            <summary>
            Provides HTTP content based on a string, with the string itself captured to a property
            so it can be read without affecting the read-once content stream.
            </summary>
        </member>
        <member name="P:Flurl.Http.Content.CapturedStringContent.Content">
            <summary>
            The content body captured as a string. Can be read multiple times (unlike the content stream).
            </summary>
        </member>
        <member name="T:Flurl.Http.Content.CapturedJsonContent">
            <summary>
            Provides HTTP content based on a serialized JSON object, with the JSON string captured to a property
            so it can be read without affecting the read-once content stream.
            </summary>
        </member>
        <member name="M:Flurl.Http.DeleteExtensions.DeleteAsync(Flurl.Http.FlurlClient)">
            <summary>
            Sends an asynchronous DELETE request.
            </summary>
            <returns>A Task whose result is the received HttpResponseMessage.</returns>
        </member>
        <member name="M:Flurl.Http.DeleteExtensions.DeleteAsync(System.String)">
            <summary>
            Creates a FlurlClient from the URL and sends an asynchronous DELETE request.
            </summary>
            <returns>A Task whose result is the received HttpResponseMessage.</returns>
        </member>
        <member name="M:Flurl.Http.DeleteExtensions.DeleteAsync(Flurl.Url)">
            <summary>
            Creates a FlurlClient from the URL and sends an asynchronous DELETE request.
            </summary>
            <returns>A Task whose result is the received HttpResponseMessage.</returns>
        </member>
        <member name="T:Flurl.Http.FlurlClient">
            <summary>
            A simple container for a Url and an HttpClient, used to enable fluent chaining.
            </summary>
        </member>
        <member name="P:Flurl.Http.FlurlClient.Url">
            <summary>
            Gets the URL to be called in subsequent HTTP calls.
            </summary>
        </member>
        <member name="P:Flurl.Http.FlurlClient.HttpClient">
            <summary>
            Gets the HttpClient to be used in subsequent HTTP calls. Creation (when necessary) is delegated
            to FlurlHttp.HttpClientFactory. Reused for the life of the FlurlClient.
            </summary>
        </member>
        <member name="T:Flurl.Http.FlurlHttp">
            <summary>
            A static container for global configuration settings affecting Flurl.Http behavior.
            </summary>
        </member>
        <member name="M:Flurl.Http.FlurlHttp.Configure(System.Action{Flurl.Http.Configuration.FlurlHttpConfigurationOptions})">
            <summary>
            Provides thread-safe accesss to Flurl.Http's global configuration options. Should only be
            called once at application startup.
            </summary>
            <param name="configAction"></param>
        </member>
        <member name="T:Flurl.Http.FlurlHttpException">
            <summary>
            An exception that is thrown when an HTTP call made by Flurl.Http fails, including when the response
            indicates an unsuccessful HTTP status code.
            </summary>
        </member>
        <member name="P:Flurl.Http.FlurlHttpException.Call">
            <summary>
            An object containing details about the failed HTTP call
            </summary>
        </member>
        <member name="T:Flurl.Http.FlurlHttpTimeoutException">
            <summary>
            An exception that is thrown when an HTTP call made by Flurl.Http times out.
            </summary>
        </member>
        <member name="M:Flurl.Http.GetExtensions.GetAsync(Flurl.Http.FlurlClient)">
            <summary>
            Sends an asynchronous GET request.
            </summary>
            <returns>A Task whose result is the received HttpResponseMessage.</returns>
        </member>
        <member name="M:Flurl.Http.GetExtensions.GetAsync(System.String)">
            <summary>
            Creates a FlurlClient from the URL and sends an asynchronous GET request.
            </summary>
            <returns>A Task whose result is the received HttpResponseMessage.</returns>
        </member>
        <member name="M:Flurl.Http.GetExtensions.GetAsync(Flurl.Url)">
            <summary>
            Creates a FlurlClient from the URL and sends an asynchronous GET request.
            </summary>
            <returns>A Task whose result is the received HttpResponseMessage.</returns>
        </member>
        <member name="M:Flurl.Http.GetExtensions.GetJsonAsync``1(Flurl.Http.FlurlClient)">
            <summary>
            Sends an asynchronous GET request and deserializes the JSON-formatted response body to an object of type T.
            </summary>
            <typeparam name="T">A type whose structure matches the expected JSON response.</typeparam>
            <returns>A Task whose result is an object containing data in the response body.</returns>
        </member>
        <member name="M:Flurl.Http.GetExtensions.GetJsonAsync``1(System.String)">
            <summary>
            Creates a FlurlClient from the URL and sends an asynchronous GET request and deserializes the JSON-formatted response body to an object of type T.
            </summary>
            <typeparam name="T">A type whose structure matches the expected JSON response.</typeparam>
            <returns>A Task whose result is an object containing data in the response body.</returns>
        </member>
        <member name="M:Flurl.Http.GetExtensions.GetJsonAsync``1(Flurl.Url)">
            <summary>
            Creates a FlurlClient from the URL and sends an asynchronous GET request and deserializes the JSON-formatted response body to an object of type T.
            </summary>
            <typeparam name="T">A type whose structure matches the expected JSON response.</typeparam>
            <returns>A Task whose result is an object containing data in the response body.</returns>
        </member>
        <member name="M:Flurl.Http.GetExtensions.GetJsonAsync(Flurl.Http.FlurlClient)">
            <summary>
            Sends an asynchronous GET request and deserializes the JSON-formatted response body to a dynamic object.
            </summary>
            <returns>A Task whose result is a dynamic object containing data in the response body.</returns>
        </member>
        <member name="M:Flurl.Http.GetExtensions.GetJsonAsync(System.String)">
            <summary>
            Creates a FlurlClient from the URL and sends an asynchronous GET request and deserializes the JSON-formatted response body to a dynamic object.
            </summary>
            <returns>A Task whose result is a dynamic object containing data in the response body.</returns>
        </member>
        <member name="M:Flurl.Http.GetExtensions.GetJsonAsync(Flurl.Url)">
            <summary>
            Creates a FlurlClient from the URL and sends an asynchronous GET request and deserializes the JSON-formatted response body to a dynamic object.
            </summary>
            <returns>A Task whose result is a dynamic object containing data in the response body.</returns>
        </member>
        <member name="M:Flurl.Http.GetExtensions.GetJsonListAsync(Flurl.Http.FlurlClient)">
            <summary>
            Sends an asynchronous GET request and deserializes the JSON-formatted response body to a list of dynamic objects.
            </summary>
            <returns>A Task whose result is a list of dynamic objects containing data in the response body.</returns>
        </member>
        <member name="M:Flurl.Http.GetExtensions.GetJsonListAsync(System.String)">
            <summary>
            Creates a FlurlClient from the URL and sends an asynchronous GET request and deserializes the JSON-formatted response body to a list of dynamic objects.
            </summary>
            <returns>A Task whose result is a list of dynamic objects containing data in the response body.</returns>
        </member>
        <member name="M:Flurl.Http.GetExtensions.GetJsonListAsync(Flurl.Url)">
            <summary>
            Creates a FlurlClient from the URL and sends an asynchronous GET request and deserializes the JSON-formatted response body to a list of dynamic objects.
            </summary>
            <returns>A Task whose result is a list of dynamic objects containing data in the response body.</returns>
        </member>
        <member name="M:Flurl.Http.GetExtensions.GetStringAsync(Flurl.Http.FlurlClient)">
            <summary>
            Sends an asynchronous GET request and returns the response body as a string.
            </summary>
            <returns>A Task whose result is the response body.</returns>
        </member>
        <member name="M:Flurl.Http.GetExtensions.GetStringAsync(System.String)">
            <summary>
            Creates a FlurlClient from the URL and sends an asynchronous GET request and returns the response body as a string.
            </summary>
            <returns>A Task whose result is the response body.</returns>
        </member>
        <member name="M:Flurl.Http.GetExtensions.GetStringAsync(Flurl.Url)">
            <summary>
            Creates a FlurlClient from the URL and sends an asynchronous GET request and returns the response body as a string.
            </summary>
            <returns>A Task whose result is the response body.</returns>
        </member>
        <member name="M:Flurl.Http.GetExtensions.GetStreamAsync(Flurl.Http.FlurlClient)">
            <summary>
            Sends an asynchronous GET request and returns the response body as a stream.
            </summary>
            <returns>A Task whose result is the response body.</returns>
        </member>
        <member name="M:Flurl.Http.GetExtensions.GetStreamAsync(System.String)">
            <summary>
            Creates a FlurlClient from the URL and sends an asynchronous GET request and returns the response body as a stream.
            </summary>
            <returns>A Task whose result is the response body.</returns>
        </member>
        <member name="M:Flurl.Http.GetExtensions.GetStreamAsync(Flurl.Url)">
            <summary>
            Creates a FlurlClient from the URL and sends an asynchronous GET request and returns the response body as a stream.
            </summary>
            <returns>A Task whose result is the response body.</returns>
        </member>
        <member name="M:Flurl.Http.GetExtensions.GetBytesAsync(Flurl.Http.FlurlClient)">
            <summary>
            Sends an asynchronous GET request and returns the response body as a byte array.
            </summary>
            <returns>A Task whose result is the response body.</returns>
        </member>
        <member name="M:Flurl.Http.GetExtensions.GetBytesAsync(System.String)">
            <summary>
            Creates a FlurlClient from the URL and sends an asynchronous GET request and returns the response body as a byte array.
            </summary>
            <returns>A Task whose result is the response body.</returns>
        </member>
        <member name="M:Flurl.Http.GetExtensions.GetBytesAsync(Flurl.Url)">
            <summary>
            Creates a FlurlClient from the URL and sends an asynchronous GET request and returns the response body as a byte array.
            </summary>
            <returns>A Task whose result is the response body.</returns>
        </member>
        <member name="M:Flurl.Http.HeadExtensions.HeadAsync(Flurl.Http.FlurlClient)">
            <summary>
            Sends an asynchronous HEAD request.
            </summary>
            <returns>A Task whose result is the received HttpResponseMessage.</returns>
        </member>
        <member name="M:Flurl.Http.HeadExtensions.HeadAsync(System.String)">
            <summary>
            Creates a FlurlClient from the URL and sends an asynchronous HEAD request.
            </summary>
            <returns>A Task whose result is the received HttpResponseMessage.</returns>
        </member>
        <member name="M:Flurl.Http.HeadExtensions.HeadAsync(Flurl.Url)">
            <summary>
            Creates a FlurlClient from the URL and sends an asynchronous HEAD request.
            </summary>
            <returns>A Task whose result is the received HttpResponseMessage.</returns>
        </member>
        <member name="M:Flurl.Http.PostExtensions.PostJsonAsync(Flurl.Http.FlurlClient,System.Object)">
            <summary>
            Sends an asynchronous POST request of specified data (usually an anonymous object or dictionary) formatted as JSON.
            </summary>
            <param name="data">Data to be serialized and posted.</param>
            <returns>A Task whose result is the received HttpResponseMessage.</returns>
        </member>
        <member name="M:Flurl.Http.PostExtensions.PostJsonAsync(System.String,System.Object)">
            <summary>
            Creates a FlurlClient from the URL and sends an asynchronous POST request of specified data (usually an anonymous object or dictionary) formatted as JSON.
            </summary>
            <param name="data">Data to be serialized and posted.</param>
            <returns>A Task whose result is the received HttpResponseMessage.</returns>
        </member>
        <member name="M:Flurl.Http.PostExtensions.PostJsonAsync(Flurl.Url,System.Object)">
            <summary>
            Creates a FlurlClient from the URL and sends an asynchronous POST request of specified data (usually an anonymous object or dictionary) formatted as JSON.
            </summary>
            <param name="data">Data to be serialized and posted.</param>
            <returns>A Task whose result is the received HttpResponseMessage.</returns>
        </member>
        <member name="M:Flurl.Http.PostExtensions.PostUrlEncodedAsync(Flurl.Http.FlurlClient,System.Object)">
            <summary>
            Sends an asynchronous POST request of specified data (usually an anonymous object or dictionary) serialized as URL-encoded key/value pair (simulating a form post).
            </summary>
            <param name="data">Data to be serialized and posted.</param>
            <returns>A Task whose result is the received HttpResponseMessage.</returns>
        </member>
        <member name="M:Flurl.Http.PostExtensions.PostUrlEncodedAsync(System.String,System.Object)">
            <summary>
            Creates a FlurlClient from the URL and sends an asynchronous POST request of specified data (usually an anonymous object or dictionary) serialized as URL-encoded key/value pair (simulating a form post).
            </summary>
            <param name="data">Data to be serialized and posted.</param>
            <returns>A Task whose result is the received HttpResponseMessage.</returns>
        </member>
        <member name="M:Flurl.Http.PostExtensions.PostUrlEncodedAsync(Flurl.Url,System.Object)">
            <summary>
            Creates a FlurlClient from the URL and sends an asynchronous POST request of specified data (usually an anonymous object or dictionary) serialized as URL-encoded key/value pair (simulating a form post).
            </summary>
            <param name="data">Data to be serialized and posted.</param>
            <returns>A Task whose result is the received HttpResponseMessage.</returns>
        </member>
        <member name="M:Flurl.Http.PutExtensions.PutJsonAsync(Flurl.Http.FlurlClient,System.Object)">
            <summary>
            Sends an asynchronous PUT request of specified data (usually an anonymous object or dictionary) formatted as JSON.
            </summary>
            <param name="data">Data to be serialized and putted.</param>
            <returns>A Task whose result is the received HttpResponseMessage.</returns>
        </member>
        <member name="M:Flurl.Http.PutExtensions.PutJsonAsync(System.String,System.Object)">
            <summary>
            Creates a FlurlClient from the URL and sends an asynchronous PUT request of specified data (usually an anonymous object or dictionary) formatted as JSON.
            </summary>
            <param name="data">Data to be serialized and putted.</param>
            <returns>A Task whose result is the received HttpResponseMessage.</returns>
        </member>
        <member name="M:Flurl.Http.PutExtensions.PutJsonAsync(Flurl.Url,System.Object)">
            <summary>
            Creates a FlurlClient from the URL and sends an asynchronous PUT request of specified data (usually an anonymous object or dictionary) formatted as JSON.
            </summary>
            <param name="data">Data to be serialized and putted.</param>
            <returns>A Task whose result is the received HttpResponseMessage.</returns>
        </member>
        <member name="M:Flurl.Http.PutExtensions.PutUrlEncodedAsync(Flurl.Http.FlurlClient,System.Object)">
            <summary>
            Sends an asynchronous PUT request of specified data (usually an anonymous object or dictionary) serialized as URL-encoded key/value pair.
            </summary>
            <param name="data">Data to be serialized and putted.</param>
            <returns>A Task whose result is the received HttpResponseMessage.</returns>
        </member>
        <member name="M:Flurl.Http.PutExtensions.PutUrlEncodedAsync(System.String,System.Object)">
            <summary>
            Creates a FlurlClient from the URL and sends an asynchronous PUT request of specified data (usually an anonymous object or dictionary) serialized as URL-encoded key/value pair.
            </summary>
            <param name="data">Data to be serialized and putted.</param>
            <returns>A Task whose result is the received HttpResponseMessage.</returns>
        </member>
        <member name="M:Flurl.Http.PutExtensions.PutUrlEncodedAsync(Flurl.Url,System.Object)">
            <summary>
            Creates a FlurlClient from the URL and sends an asynchronous PUT request of specified data (usually an anonymous object or dictionary) serialized as URL-encoded key/value pair.
            </summary>
            <param name="data">Data to be serialized and putted.</param>
            <returns>A Task whose result is the received HttpResponseMessage.</returns>
        </member>
        <member name="T:Flurl.Http.ResponseMessageExtensions">
            <summary>
            Async extension methods that can be chained off Task&lt;HttpResponseMessage&gt;, avoiding nested awaits.
            </summary>
        </member>
        <member name="M:Flurl.Http.ResponseMessageExtensions.ReceiveJson``1(System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage})">
            <summary>
            Deserializes JSON-formatted HTTP response body to object of type T. Intended to chain off an async HTTP.
            </summary>
            <typeparam name="T">A type whose structure matches the expected JSON response.</typeparam>
            <returns>A Task whose result is an object containing data in the response body.</returns>
            <example>x = await url.PostAsync(data).ReceiveJson&lt;T&gt;()</example>
        </member>
        <member name="M:Flurl.Http.ResponseMessageExtensions.ReceiveJson(System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage})">
            <summary>
            Deserializes JSON-formatted HTTP response body to a dynamic object. Intended to chain off an async call.
            </summary>
            <returns>A Task whose result is a dynamic object containing data in the response body.</returns>
            <example>d = await url.PostAsync(data).ReceiveJson()</example>
        </member>
        <member name="M:Flurl.Http.ResponseMessageExtensions.ReceiveJsonList(System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage})">
            <summary>
            Deserializes JSON-formatted HTTP response body to a list of dynamic objects. Intended to chain off an async call.
            </summary>
            <returns>A Task whose result is a list of dynamic objects containing data in the response body.</returns>
            <example>d = await url.PostAsync(data).ReceiveJsonList()</example>
        </member>
        <member name="M:Flurl.Http.ResponseMessageExtensions.ReceiveString(System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage})">
            <summary>
            Returns HTTP response body as a string. Intended to chain off an async call.
            </summary>
            <returns>A Task whose result is the response body as a string.</returns>
            <example>s = await url.PostAsync(data).ReceiveString()</example>
        </member>
        <member name="M:Flurl.Http.ResponseMessageExtensions.ReceiveStream(System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage})">
            <summary>
            Returns HTTP response body as a stream. Intended to chain off an async call.
            </summary>
            <returns>A Task whose result is the response body as a stream.</returns>
            <example>stream = await url.PostAsync(data).ReceiveStream()</example>
        </member>
        <member name="M:Flurl.Http.ResponseMessageExtensions.ReceiveBytes(System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage})">
            <summary>
            Returns HTTP response body as a byte array. Intended to chain off an async call.
            </summary>
            <returns>A Task whose result is the response body as a byte array.</returns>
            <example>bytes = await url.PostAsync(data).ReceiveBytes()</example>
        </member>
        <member name="T:Flurl.Http.Testing.FakeHttpMessageHandler">
            <summary>
            An HTTP message handler that prevents actual HTTP calls from being made and instead returns
            responses from a provided response factory.
            </summary>
        </member>
        <member name="T:Flurl.Http.Testing.HttpCallAssertException">
            <summary>
            An exception thrown by HttpTest's assertion methods to indicate that the assertion failed.
            </summary>
        </member>
        <member name="T:Flurl.Http.Testing.HttpCallAssertion">
            <summary>
            Provides fluent helpers for asserting against (faked) HTTP calls. This class is normally not
            instantiated directly; you can get an instance via HttpTest.ShouldHaveCalled or
            HttpTest.ShouldNotHaveCalled
            </summary>
        </member>
        <member name="M:Flurl.Http.Testing.HttpCallAssertion.#ctor(System.Collections.Generic.IEnumerable{Flurl.Http.HttpCall},System.Boolean)">
            <param name="loggedCalls">Set of calls (usually from HttpTest.CallLog) to assert against.</param>
            <param name="negate">if true, assertions pass when calls matching criteria were NOT made.</param>
        </member>
        <member name="M:Flurl.Http.Testing.HttpCallAssertion.Times(System.Int32)">
            <summary>
            Assert whether calls matching specified criteria were made a specific number of times. (When not specified,
            assertions verify whether any calls matching criteria were made.)
            </summary>
            <param name="expectedCount">Exact numnber of expected calls</param>
            <returns></returns>
        </member>
        <member name="M:Flurl.Http.Testing.HttpCallAssertion.WithUrlPattern(System.String)">
            <summary>
            Asserts whether calls were made matching given URL or URL pattern.
            </summary>
            <param name="urlPattern">Can contain * wildcard.</param>
            <returns></returns>
        </member>
        <member name="M:Flurl.Http.Testing.HttpCallAssertion.WithRequestBody(System.String)">
            <summary>
            Asserts wheter calls were made containing given request body or request body pattern.
            </summary>
            <param name="bodyPattern">Can contain * wildcard.</param>
            <returns></returns>
        </member>
        <member name="M:Flurl.Http.Testing.HttpCallAssertion.WithVerb(System.Net.Http.HttpMethod)">
            <summary>
            Asserts whether calls were made with given HTTP verb.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flurl.Http.Testing.HttpCallAssertion.WithContentType(System.String)">
            <summary>
            Asserts whether calls were made with a request body of the given content (MIME) type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flurl.Http.Testing.HttpCallAssertion.With(System.Func{Flurl.Http.HttpCall,System.Boolean})">
            <summary>
            Asserts whether calls were made matching a given predicate function.
            </summary>
            <param name="match">Predicate (usually a lambda expression) that tests an HttpCall and returns a bool.</param>
            <returns></returns>
        </member>
        <member name="T:Flurl.Http.Testing.HttpTest">
            <summary>
            An object whose existence puts Flurl.Http into test mode where actual HTTP calls are faked. Provides a response
            queue, call log, and assertion helpers for use in Arrange/Act/Assert style tests.
            </summary>
        </member>
        <member name="M:Flurl.Http.Testing.HttpTest.RespondWith(System.Int32,System.String)">
            <summary>
            Adds an HttpResponseMessage to the response queue with the given HTTP status code and content body.
            </summary>
        </member>
        <member name="M:Flurl.Http.Testing.HttpTest.RespondWith(System.String)">
            <summary>
            Adds an HttpResponseMessage to the response queue with a 200 (OK) status code and the given content body.
            </summary>
        </member>
        <member name="M:Flurl.Http.Testing.HttpTest.RespondWithJson(System.Int32,System.Object)">
            <summary>
            Adds an HttpResponseMessage to the response queue with the given HTTP status code and the given data serialized to JSON as the content body.
            </summary>
        </member>
        <member name="M:Flurl.Http.Testing.HttpTest.RespondWithJson(System.Object)">
            <summary>
            Adds an HttpResponseMessage to the response queue with a 200 (OK) status code and the given data serialized to JSON as the content body.
            </summary>
        </member>
        <member name="M:Flurl.Http.Testing.HttpTest.SimulateTimeout">
            <summary>
            Adds a simulated timeout response to the response queue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flurl.Http.Testing.HttpTest.ShouldHaveCalled(System.String)">
            <summary>
            Throws an HttpCallAssertException if a URL matching the given pattern was not called.
            </summary>
            <param name="urlPattern">URL that should have been called. Can include * wildcard character.</param>
        </member>
        <member name="M:Flurl.Http.Testing.HttpTest.ShouldNotHaveCalled(System.String)">
            <summary>
            Throws an HttpCallAssertException if a URL matching the given pattern was called.
            </summary>
            <param name="urlPattern">URL that should not have been called. Can include * wildcard character.</param>
        </member>
        <member name="P:Flurl.Http.Testing.HttpTest.ResponseQueue">
            <summary>
            Queue of HttpResponseMessages to be returned in place of real responses during testing.
            </summary>
        </member>
        <member name="P:Flurl.Http.Testing.HttpTest.CallLog">
            <summary>
            List of all (fake) HTTP calls made since this HttpTest was created.
            </summary>
        </member>
    </members>
</doc>
